#+AUTHOR: Daniel Saldivar
#+TITLE: GNU Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes


* Auto Tangle
;; Automatically tangle our Emacs.org config file when we save it
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/tangle-config-on-save ()
    "Tangle the Emacs configuration file if it's being saved."
    (when (equal (file-truename (buffer-file-name))
                 (file-truename (expand-file-name "~/.emacs.d/config.org")))
      (org-babel-tangle)))


  (add-hook 'after-save-hook #'my/tangle-config-on-save)
#+end_src


* Emacs Initialization
** For Macs
 Download brew install emacs-plus ;; Do not install regular emacs from brew

** Package Sources
To install packages, it is useful to c onfigure the package sources.

#+BEGIN_SRC emacs-lisp
    ;; Initializie package sources
    (require 'package) ;; this might happen by default, but we have this just in case


    ;; These are all the different package repositories
    (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))





#+END_SRC

** Package configurations
To manage the package configuratiosn with ~use-package~ you must install it with the following code snippet.

~use-package~ simplifies downloading packages.

#+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
  (setq use-package-always-ensure t)

  (setq inhibit-startup-message t)

#+END_SRC

#+RESULTS:
: t

** Correct $PATH
exec-path-from-shell is a useful Emacs package that copies your shell's environment variables, such as PATH, to Emacs. This can help resolve issues where Emacs doesn't have the correct environment, leading to problems like "command not found."


#+begin_src emacs-lisp
  
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

#+end_src
** Open up gtd file automatically
#+begin_src emacs-lisp
(setq initial-buffer-choice "~/org/gtd/gtd.org")
#+end_src
* Defaults
#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Prefer spaces over tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefer the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (column-number-mode 1)                            ; Show the column number
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
  (scroll-bar-mode -1)                               ; Disable visible scrollbar
  (tool-bar-mode -1)                                ; Disable the toolbar
  (tooltip-mode -1)                                 ; Disable tooltips
  (set-fringe-mode 10)                              ; Give somebreathing room

  (menu-bar-mode -1)                                ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)




#+END_SRC

* General Improvements
** Line numbers
Adds relative line numbers and disables it for specific modes
#+BEGIN_SRC emacs-lisp


            (column-number-mode)

(defun my-relative-line-numbers ()
    "Enable relative line numbers in all modes except Org-mode, Term-mode, and Shell-mode."
    (unless (or(derived-mode-p 'org-mode)
                (derived-mode-p 'term-mode)
                (derived-mode-p 'vterm-mode)
                (derived-mode-p 'eshell-mode)
                (derived-mode-p 'treemacs-mode-hook)
                (derived-mode-p 'eshell-mode-hook)
                (derived-mode-p 'shell-mode))
      (display-line-numbers-mode t)
      (setq display-line-numbers 'visual)))

  (add-hook 'find-file-hook 'my-relative-line-numbers)
  (add-hook 'after-change-major-mode-hook 'my-relative-line-numbers)



#+END_SRC
** smooth scrolling
#+begin_src emacs-lisp
  (pixel-scroll-mode)
(setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour.
(setq pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels).
(setq mouse-wheel-scroll-amount '(1)) ; Distance in pixel-resolution to scroll each mouse wheel event.
(setq mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me.
#+end_src
** Rainbow Delimiters
This will be useful when we are editing lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

** Tabs
#+BEGIN_SRC emacs-lisp
  (global-tab-line-mode t)
#+END_SRC
** helpful
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)
         ("C-h F" . helpful-function)
         ("C-h C" . helpful-command)))
#+end_src
** Apperance
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package all-the-icons
  :ensure t)

(use-package doom-themes
  :config
  (setq doom-themes-enabled-bold t
	doom-themes-enabled-italic t)
  (load-theme 'doom-palenight t)

  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  (doom-themes-org-config))

#+END_SRC


** Ivy and Counsel

NOTE: when usuing M-x you can do M-o and d to go to the definition of a function2
#+BEGIN_SRC emacs-lisp
    (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))


  (use-package swiper :ensure t)

  ;; Override the basic Emacs commands
  (use-package counsel
    :bind ; load when pressed
    (("M-x"     . counsel-M-x)
     ("C-s"     . swiper)
   
     ("C-x C-f" . counsel-find-file)
     ("C-x C-r" . counsel-recentf)  ; search for recently edited
     ("C-c g"   . counsel-git)      ; search for files in git repo
     ("C-c j"   . counsel-git-grep) ; search for regexp in git repo
     ("C-c /"   . counsel-ag)       ; Use ag for regexp
     ("C-x l"   . counsel-locate)
     ("C-x C-f" . counsel-find-file)
     ("<f1> f"  . counsel-describe-function)
     ("<f1> v"  . counsel-describe-variable)
     ("<f1> l"  . counsel-find-library)
     ("<f2> i"  . counsel-info-lookup-symbol)
     ("<f2> u"  . counsel-unicode-char)
     ("C-c C-r" . ivy-resume)))

  
  (use-package ivy-rich
    :ensure t
   :after (counsel)
    :init
    (ivy-rich-mode 1))



#+END_SRC

* Evil Mode
#+BEGIN_SRC emacs-lisp
    (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-set-undo-system 'undo-redo)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    ;;(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))


  ;; evil-collection will turn evil-mode on in many emacs modes by default
  (use-package evil-collection
    :after evil
  ;  :after magit ;;only because evil-magit is only availble in evil-collection now not melpa
    :config
    (evil-collection-init))

#+END_SRC

** Vim Redo
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))
#+end_src


* Keybindings
** General

For ideas on how to do some keybindgs, check out doomemacs keybindigns
https://github.com/doomemacs/doomemacs/blob/develop/modules/config/default/%2Bevil-bindings.el

#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;; General, replacement for evil-leader ;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package general
    :config
    (general-create-definer my/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (my/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "o"  '(:ignore o :which-key "code") 
      "n"  '(:ignore o :which-key "notes")
      "b"  '(:ignore o :which-key "buffers")
      "p"  '(:ignore o :which-key "projectile")
      "m"  '(:ignore o :which-key "magit")
       "c"  '(:ignore o :which-key "code")

       "s" '(org-download-screenshot :which-key "screenshot") 
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ff" 'find-file
      "bs" 'counsel-switch-buffer
      "aa" 'org-agenda
      "at" 'org-time-stamp
      "as" 'org-schedule
      "ar" 'org-eefile
      "ps" '(counsel-projectile-rg :which-key "Search project using rg")
      "ms" 'magit-status
      "nf" 'org-roam-node-find
      "ni" 'org-roam-node-insert 
      "e" 'treemacs
      "cs" 'lsp-treemacs-symbols
      "cj" 'lsp-ivy-workspace-symbol
      "cr" 'lsp-find-references
      "ot" '(org-babel-tangle :which-key "Tangle Code") 
      "ol" '(org-insert-link :which-key "Insert/Edit Link")
      "oc" 'org-capture
      "op" 'org-set-property
      "or" 'org-refile
      "tag" '(counsel-org-tag :which-key "Tag todo")
      "id" 'org-redisplay-inline-images
      ))


#+end_src

 
** which-key
Will give you a nice panel when you're using keybindings.

It will let you know what keybinds are available as you are typing.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))


#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+END_SRC

* Magit

How to use magit


magit-status:
s to stage selected file
S to stage all files
u to unstage
c to commit
P to push

To commit, C-c C-c confirms the commit

C-c C-k to exit out of the commit message buffer 


you can press ? to see all the options you have in magit-status


#+BEGIN_SRC emacs-lisp
    (use-package magit
      :after evil ;; to get evil-magit work in evil-collections
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+END_SRC

* Org Mode
** Regular org
#+begin_src emacs-lisp 

          ;;change the size and font of headlines
          (defun my/org-mode-setup ()
            (org-indent-mode)
            (variable-pitch-mode 1)
            (visual-line-mode 1))

          (defun my/org-font-setup ()
            ;; Replace list hyphen with dot
            (font-lock-add-keywords 'org-mode
                                    '(("^ *\\([-]\\) "
                                       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

            ;; Set faces for heading levels
            (dolist (face '((org-level-1 . 1.2)
                            (org-level-2 . 1.1)
                            (org-level-3 . 1.05)
                            (org-level-4 . 1.0)
                            (org-level-5 . 1.1)
                            (org-level-6 . 1.1)
                            (org-level-7 . 1.1)
                            (org-level-8 . 1.1)))
              (set-face-attribute (car face) nil :font "Courier" :weight 'regular :height (cdr face)))

             ;; Ensure that anything that should be fixed-pitch in Org files appears that way
            (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
            (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
            (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
            (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
            (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
            (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
            (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))



          ;; This will give us some padding on the left and the right so it feels more like a document
          (defun my/org-mode-visual-fill ()
            (setq visual-fill-column-width 150
                  visual-fill-column-center-text t)
            (visual-fill-column-mode 1))

          (use-package visual-fill-column
            :hook (org-mode . my/org-mode-visual-fill))





          (use-package org
              :hook (org-mode . my/org-mode-setup)
              :config
              ;;;;;;;;;;; Start org-babel
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;; START org-babel ;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

              (require 'ob)
              (require 'ob-python)
              (setq org-confirm-babel-evaluate nil) ; Optional: don't prompt before running code blocks
              (setq org-src-fontify-natively t)
              (setq org-src-tab-acts-natively t)
              (setq org-src-window-setup 'current-window)
              (setq org-babel-python-command "python3") ; Set this to "python3" if your system uses "python3" as the command
              (org-babel-do-load-languages
               'org-babel-load-languages
               '(
                (conf . t)
                (python . t)
                (emacs-lisp . t)
                ))
  ;            (setq org-ellipsis " ▾"
   ;             org-hide-emphasis-markers t)


    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;; End org-babel ;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                      (setq org-agenda-start-with-log-mode t)
              (setq org-enable-org-contacts-support t)
              (setq org-log-done 'time)
              (setq org-log-into-drawer t)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;; START org-agenda ;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


                (setq org-agenda-block-separator 8411)

                  (setq org-agenda-custom-commands
                              '(("v" "A beter agenda view"
                                 ((tags "PRIORITY=\"A\""
                                        ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                     (org-agenda-overriding-header "High-priority unfinished tasks:")))

                              (tags "PRIORITY=\"B\""
                                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))

                              (tags "PRIORITY=\"C\""
                                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))

                              (tags "customtag"
                                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                (org-agenda-overriding-header "Tasks maredk with custom tag")))

                          (avagenda "")

                          (alltodo "")

                         )))

                      )
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;; END org-agenda ;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


      ;; (require 'ob-go) 
      ;;        (org-babel-do-load-languages
        ;;      'org-babel-load-languages
        ;;      '((emacs-lisp . t)
          ;;      (shell . t)
       ;;         (terraform . t)
         ;;       (go . t)
         ;;       (python . t)))




              ;;;;; end org babel

              (my/org-font-setup))



    (defadvice org-agenda (around split-vertically activate)
    (let ((split-width-threshold 80))  ; or whatever width makes sense for you
      ad-do-it))


    (defadvice org-capture (around split-vertically activate)
    (let ((split-width-threshold 80))  ; or whatever width makes sense for you
      ad-do-it))
#+end_src

** Change heading icons
#+BEGIN_SRC emacs-lisp
    (setq python-shell-interpreter "/opt/homebrew/bin/python3")

  (use-package org-superstar
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
      (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "❀" "✼" "✻" "✤"))
      (setq org-hide-leading-stars t)
      (setq org-superstar-special-todo-items t)

            (setq org-agenda-files '("~/org/gtd/inbox.org"
                         "~/org/gtd/tickler.org"
                         "~/org/gtd/gtd.org"
                         "~/org/holidays.org"
                         "~/org/birthdays.org")) ;; this will set all the files that will appear in your agenda
       (setq org-ellipsis " ▾")
       (setq org-hide-emphasis-markers t)
       (setq org-confirm-babel-evaluate nil)



         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;; START org-capture ;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/org/gtd/inbox.org" "Tasks")
                                   "* TODO %i   %?")
                                  ("T" "Tickler" entry
                                   (file+headline "~/org/gtd/tickler.org" "Tickler")
                                   "* %i%? \n %U")
                                  ("j" "Journal" entry
                                   (file+olp+datetree "~/org/journal.org")
                                   "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
                                   :clock-in :clock-resume
                                   :empty-lines 1)

                                  ("c" "Contacts")
                                  ("cp" "Personal Contacts" entry
                                   (file+headline "~/org/contacts.org" "Personal")
                                  "* %(org-contacts-template-name) 
  :PROPERTIES: 
  :EMAIL: 
  :PHONE: 
  :ADDRESS: 
  :BIRTHDAY: %^{YYYY-MM-DD}
  :NOTE: 
  :END:\n" :kill-buffer t)

                                  ("cc" "Professional Contacts" entry
                                   (file+headline "~/org/contacts.org" "Contacts")
                                   "* %(org-contacts-template-name)
  "
                                   )
                                  ("m" "Metrics Capture")
                                  ("mw" "Weight" table-line (file+headline "~/org/metrics.org" "Weight")
                                   "| %U %^{Weight} | %^{Notes} |" :kill-buffer t)
                                  ))

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;; Start org-refile ;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
              (setq org-refile-targets
                '(("~/org/gtd/archive.org" :maxlevel . 1)
                  ("~/org/gtd/gtd.org" :maxlevel . 1)))

              ;; Save Org buffers after refiling!
              (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;; END org-refile ;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;; END org-capture ;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


            (setq org-todo-keywords
    '(
      (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "AREA(a)" "NEXT(n)" "|" "Archive(!)")
      (sequence "PROJ(p)" "ACTIVE(a)"  "WAIT(w@/!)" "|" "COMPLETED(c)" "CANC(k@)")))
      )


              (push '("conf-unix" . conf-unix) org-src-lang-modes)


#+END_SRC

#+RESULTS:
: ((conf-unix . conf-unix) (conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))

** org-agenda
#+begin_src emacs-lisp

          (setq org-agenda-block-separator 8411)

        (setq org-agenda-custom-commands
                    '(
                      ("v" "A beter agenda view"
                       (
                        (tags "PRIORITY=\"A\""
                              ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                           (org-agenda-overriding-header "High-priority unfinished tasks:")))

         ;;           (tags "PRIORITY=\"B\""
           ;;           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
             ;;          (org-agenda-overriding-header "Medium-priority unfinished tasks:")))

  ;;	              (tags "PRIORITY=\"C\""
  ;;	                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
  ;;	                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))

                    (tags "customtag"
                          ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "Tasks maredk with custom tag")))

                    (todo "NEXT"
                           ((org-agenda-overriding-header "NEXT tasks")))


                (agenda "")

      ;;	      (alltodo "")

               ))
                      ("n" "Next tasks"
                       ((todo "NEXT"
                              ((org-agenda-overriding-header "Next Tasks")))))


                      
                      )

            )

#+end_src

** org-download
This will allow you to use images in orgmode

org-download does not allow you to paste from your clipboard directly,
you can use a tool like ~pngpaste~ to achieve this.

You can download ~pngpaste~ with
~brew install pngpaste~

#+BEGIN_SRC emacs-lisp
    (use-package org-download
    :ensure t
    :config
    (require 'org-download)
    ;; Drag and drop to Dired
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq org-download-method 'directory)
    (setq-default org-download-image-dir "./img")
  ;(setq org-download-screenshot-method "screencapture -i %s")
  (setq org-download-screenshot-method "pngpaste %s")
  (setq org-download-screenshot-file "./img/tmp.png")

  ;; Annotate image links with the #+ATTR_ORG line
  ;(defun my/org-download-annotate (link)
   ; "Annotate the LINK with the #+ATTR_ORG line."
   ; (format "#+ATTR_ORG: :width 300px \n[[%s]]" link))

(defun my/org-download-annotate (link)
  "Annotate LINK with the time of download."
  (format "#+DOWNLOADED: %s @ %s\n#+ATTR_ORG: :width 700\n"
          (if (equal link org-download-screenshot-file)
              "screenshot"
            link)
          (format-time-string "%Y-%m-%d %H:%M:%S")))


  
  (setq org-download-annotate-function 'my/org-download-annotate)
  )



  ;; see images in orgmode
  (setq org-startup-with-inline-images t)
  (setq org-redisplay-inline-images t)
  (setq org-startup-with-inline-images "inlineimages")


  (defun do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t t))
  (global-set-key (kbd "C-c C-x C v")
                  'do-org-show-all-inline-images)


  (setq org-image-actual-width nil)

#+END_SRC
** Structure-templates
#+BEGIN_SRC emacs-lisp
 (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("cf" . "src conf"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("tf" . "src terraform"))
#+END_SRC



** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/org/roam")
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :target (file+head "${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n l" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-setup))


#+end_src

** org-autolist
#+begin_src emacs-lisp
      (use-package org-autolist
        :hook (org-mode . org-autolist-mode)
        :config
        (add-hook 'org-mode-hook (lambda () (org-autolist-mode))))
  
#+end_src

** Fancy priorities
#+begin_src emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :hook (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '("🟥" "🟧" "🟨")))
#+end_src
** Conf-mode
#+begin_src emacs-lisp
(use-package conf-mode
  :ensure nil ;; This is needed because conf-mode is built-in
  :mode (("\\.beanpricerc\\'" . conf-mode) ;; Associate .beanpricerc files with conf-mode
         ("\\.someotherext\\'" . conf-mode)) ;; Add more file associations here if needed
  :config
  ;; Add your customizations and additional functionality for conf-mode here
  )
#+end_src
* Calendar - calfw
#+begin_src emacs-lisp
(use-package calfw
  :ensure t
  :commands (cfw:open-calendar-buffer)
  :config
  ;; Integrate with Org mode
  (use-package calfw-org
    :ensure t
    :config
    (setq cfw:org-overwrite-default-keybinding t))

  ;; (Optional) Bind a key to quickly open the Org mode calendar view
  (global-set-key (kbd "C-c c") 'cfw:open-org-calendar))

(defun cfw:open-org-calendar ()
  "Open the Org mode calendar view with Calfw."
  (interactive)
  (let ((buf (get-buffer-create "*Org Calendar*")))
    (pop-to-buffer buf)
    (cfw:create-calendar-component-buffer
     :view 'month
     :contents-sources
     (list
      (cfw:org-create-source "Green")))))

  #+end_src

  #+RESULTS:
  : cfw:open-org-calendar

* Beancount
#+begin_src emacs-lisp
(use-package beancount
  :ensure t
  :mode ("\\.beancount\\'" . beancount-mode))
#+end_src


* Skeletor
#+begin_src emacs-lisp
(use-package skeletor
  :config
  ;; Set the directory where your project templates will be stored.
  (setq skeletor-user-directory "~/.emacs.d/skeletor-templates/")

  ;; Set the default project location.
  (setq skeletor-global-directory "~/Projects/"))
#+end_src
* Development

** Language Servers
*** Initial LSP configuration
#+begin_src emacs-lisp

  (use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

this Gives us many cool functions
| Function           | Description |
|--------------------+-------------|
| lsp-find-reference | find, can span multiple files inside a project |

*** Company mode
company mode is used for better auto completes
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
        ;  (:map lsp-mode-map
         ;  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** lsp-ui
#+begin_src emacs-lisp
 ; (use-package lsp-ui
  ;  :hook (lsp-mode . lsp-ui-mode)
   ; :custom 
    ;(lsp-ui-doc-position 'bottom)
  ;  )
  (use-package lsp-ui
 ; :ensure t
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-code-actions t)
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)))

;; Install and configure flymake
(use-package flymake
  :ensure t
  :config
  (add-hook 'flymake-diagnostic-functions 'lsp-flymake-backend))(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-code-actions t)
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)))

#+end_src

** lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src

** lsp-ivy
This gives you away to find a specific symbol inside a project
use ~<SPACE> cj~
#+begin_src emacs-lisp
  (use-package lsp-ivy)
  
#+end_src
*** Typescript
Make sure to install the lsp server:

~npm i -g typescript-language-server; npm i -g typescript~

#+begin_src emacs-lisp
  (use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src


* Term modes
** Term
#+begin_src emacs-lisp
;;(use-package term
  ;;:config
 ;; (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
  ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

  ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
  ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src

** Better term-mode colors
#+begin_src emacs-lisp
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm
#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))
#+end_src

** eshell
Eshell has evil mode which is great 
#+begin_src emacs-lisp
  
                  (defun efs/configure-eshell ()
                    ;; Save command history when commands are entered
                    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

                    ;; Truncate buffer for performance
                    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

                    ;; Bind some useful keys for evil-mode
                    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
                    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
                    (evil-normalize-keymaps)

                    (setq eshell-history-size         10000
                          eshell-buffer-maximum-lines 10000
                          eshell-hist-ignoredups t
                          eshell-scroll-to-bottom-on-input t)
  
                  )
 
                (use-package eshell-git-prompt)


                (use-package eshell
                    :hook (eshell-first-time-mode . efs/configure-eshell)
                   :config
  
                    (with-eval-after-load 'esh-opt
                     (setq eshell-destroy-buffer-when-process-dies t)
                      (setq eshell-visual-commands '("htop" "zsh" "vim", "nvim")))
  
                   (eshell-git-prompt-use-theme 'git-radar)
                    )



#+end_src

* File management
** Dired
#+begin_src emacs-lisp
    (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file
      "a" 'dired-create-empty-file)

    )
#+end_src
** Create a file in Dired using "a"
#+begin_src emacs-lisp
#+end_src
* Resources

https://github.com/rememberYou/.emacs.d/blob/master/config.org

